{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Lopes\\\\Desktop\\\\NovaFuture4\\\\Vitor-Lopes\\\\semana8\\\\astro-match\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Lopes\\\\Desktop\\\\NovaFuture4\\\\Vitor-Lopes\\\\semana8\\\\astro-match\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Lopes\\\\Desktop\\\\NovaFuture4\\\\Vitor-Lopes\\\\semana8\\\\astro-match\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Lopes\\\\Desktop\\\\NovaFuture4\\\\Vitor-Lopes\\\\semana8\\\\astro-match\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Lopes\\\\Desktop\\\\NovaFuture4\\\\Vitor-Lopes\\\\semana8\\\\astro-match\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lopes\\\\Desktop\\\\NovaFuture4\\\\Vitor-Lopes\\\\semana8\\\\astro-match\\\\src\\\\containers\\\\SwipeScreen\\\\index.js\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport UserSwipeCard from '../../components/UserSwipeCard';\nimport { AppBar } from '../../components/AppBar';\nimport { ButtonsWrapper, ContentWrapper, SwipeScreenWrapper, MatchIcon, OptionButton } from './styled';\nimport { connect } from 'react-redux';\nimport { mdiAccountMultipleCheck } from '@mdi/js';\nimport { swipeLeft, swipeRight } from '../../components/UserSwipeCard/styled';\nimport { updateCurrentPage } from '../../actions/route';\nimport { Loader } from '../../components/Loader';\nimport { fetchProfile as _fetchProfile } from '../../actions/profiles';\nexport var SwipeScreen =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SwipeScreen, _Component);\n\n  function SwipeScreen(props) {\n    var _this;\n\n    _classCallCheck(this, SwipeScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SwipeScreen).call(this, props));\n\n    _this.onChooseOption = function (option) {\n      return function () {\n        var currentAnimation = option === 'dislike' ? swipeRight : swipeLeft;\n\n        if (_this.state.currentAnimation === null) {\n          _this.setState({\n            currentAnimation: currentAnimation\n          });\n        }\n\n        if (_this.props.profileToSwipe) {\n          _this.props.chooseProfile(_this.props.profileToSwipe.id, option === 'like');\n        }\n      };\n    };\n\n    _this.state = {\n      currentAnimation: null\n    };\n    return _this;\n  }\n\n  _createClass(SwipeScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.profileToSwipe && this.props.getProfileToSwipe) {\n        this.props.getProfileToSwipe();\n      } // this.props.fetchProfile();\n\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (prevProps.profileToSwipe !== this.props.profileToSwipe) {\n        this.setState({\n          currentAnimation: null\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          profileToSwipe = _this$props.profileToSwipe,\n          goToMatchScreen = _this$props.goToMatchScreen,\n          profile = _this$props.profile;\n      var currentAnimation = this.state.currentAnimation;\n      console.log(profile);\n      return React.createElement(SwipeScreenWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(AppBar, {\n        rightAction: React.createElement(MatchIcon, {\n          size: 1.5,\n          path: mdiAccountMultipleCheck,\n          onClick: goToMatchScreen,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(ContentWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, currentAnimation !== null && React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), profileToSwipe ? React.createElement(UserSwipeCard, {\n        userToSwipe: profileToSwipe,\n        animationDirection: currentAnimation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }) : React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(ButtonsWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(OptionButton, {\n        onClick: this.onChooseOption('dislike'),\n        option: \"dislike\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"X\"), React.createElement(OptionButton, {\n        onClick: this.onChooseOption('like'),\n        option: \"like\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"\\u2665\\uFE0F\"))));\n    }\n  }]);\n\n  return SwipeScreen;\n}(Component);\nSwipeScreen.propTypes = {\n  goToMatchScreen: PropTypes.func.isRequired,\n  chooseProfile: PropTypes.func.isRequired,\n  getProfileToSwipe: PropTypes.func.isRequired,\n  profileToSwipe: PropTypes.object\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    profile: state.profiles.profile\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    goToMatchScreen: function goToMatchScreen() {\n      return dispatch(updateCurrentPage('MatchScreen'));\n    },\n    fetchProfile: function fetchProfile() {\n      return dispatch(_fetchProfile());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SwipeScreen);","map":{"version":3,"sources":["C:/Users/Lopes/Desktop/NovaFuture4/Vitor-Lopes/semana8/astro-match/src/containers/SwipeScreen/index.js"],"names":["PropTypes","React","Component","UserSwipeCard","AppBar","ButtonsWrapper","ContentWrapper","SwipeScreenWrapper","MatchIcon","OptionButton","connect","mdiAccountMultipleCheck","swipeLeft","swipeRight","updateCurrentPage","Loader","fetchProfile","SwipeScreen","props","onChooseOption","option","currentAnimation","state","setState","profileToSwipe","chooseProfile","id","getProfileToSwipe","prevProps","prevState","snapshot","goToMatchScreen","profile","console","log","propTypes","func","isRequired","object","mapStateToProps","profiles","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,kBAAzC,EAA6DC,SAA7D,EAAwEC,YAAxE,QAA4F,UAA5F;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,uBAAT,QAAwC,SAAxC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,uCAAtC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,MAAT,QAAuB,yBAAvB;AAEA,SAASC,YAAY,IAAZA,aAAT,QAA6B,wBAA7B;AAEA,WAAaC,WAAb;AAAA;AAAA;AAAA;;AACC,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,qFAAMA,KAAN;;AADkB,UAoBnBC,cApBmB,GAoBF,UAACC,MAAD;AAAA,aAAY,YAAM;AAClC,YAAIC,gBAAgB,GAAGD,MAAM,KAAK,SAAX,GAAuBP,UAAvB,GAAoCD,SAA3D;;AAEA,YAAI,MAAKU,KAAL,CAAWD,gBAAX,KAAgC,IAApC,EAA0C;AACzC,gBAAKE,QAAL,CAAc;AAAEF,YAAAA,gBAAgB,EAAEA;AAApB,WAAd;AACA;;AAED,YAAI,MAAKH,KAAL,CAAWM,cAAf,EAA+B;AAC9B,gBAAKN,KAAL,CAAWO,aAAX,CAAyB,MAAKP,KAAL,CAAWM,cAAX,CAA0BE,EAAnD,EAAuDN,MAAM,KAAK,MAAlE;AACA;AACD,OAVgB;AAAA,KApBE;;AAElB,UAAKE,KAAL,GAAa;AACZD,MAAAA,gBAAgB,EAAE;AADN,KAAb;AAFkB;AAKlB;;AANF;AAAA;AAAA,wCAQqB;AACnB,UAAI,CAAC,KAAKH,KAAL,CAAWM,cAAZ,IAA8B,KAAKN,KAAL,CAAWS,iBAA7C,EAAgE;AAC/D,aAAKT,KAAL,CAAWS,iBAAX;AACA,OAHkB,CAInB;;AACA;AAbF;AAAA;AAAA,uCAeoBC,SAfpB,EAe+BC,SAf/B,EAe0CC,QAf1C,EAeoD;AAClD,UAAIF,SAAS,CAACJ,cAAV,KAA6B,KAAKN,KAAL,CAAWM,cAA5C,EAA4D;AAC3D,aAAKD,QAAL,CAAc;AAAEF,UAAAA,gBAAgB,EAAE;AAApB,SAAd;AACA;AACD;AAnBF;AAAA;AAAA,6BAiCU;AAAA,wBAE6C,KAAKH,KAFlD;AAAA,UAEAM,cAFA,eAEAA,cAFA;AAAA,UAEgBO,eAFhB,eAEgBA,eAFhB;AAAA,UAEiCC,OAFjC,eAEiCA,OAFjC;AAAA,UAGAX,gBAHA,GAGqB,KAAKC,KAH1B,CAGAD,gBAHA;AAIRY,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAEA,aACC,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,MAAD;AACC,QAAA,WAAW,EAAE,oBAAC,SAAD;AACZ,UAAA,IAAI,EAAE,GADM;AAEZ,UAAA,IAAI,EAAErB,uBAFM;AAGZ,UAAA,OAAO,EAAEoB,eAHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,EAQC,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACEV,gBAAgB,KAAK,IAArB,IAA8B,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADhC,EAEEG,cAAc,GAAG,oBAAC,aAAD;AACjB,QAAA,WAAW,EAAEA,cADI;AAEjB,QAAA,kBAAkB,EAAEH,gBAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAIb,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANH,EAQC,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,YAAD;AAAc,QAAA,OAAO,EAAE,KAAKF,cAAL,CAAoB,SAApB,CAAvB;AAAuD,QAAA,MAAM,EAAC,SAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADD,EAEC,oBAAC,YAAD;AAAc,QAAA,OAAO,EAAE,KAAKA,cAAL,CAAoB,MAApB,CAAvB;AAAoD,QAAA,MAAM,EAAC,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFD,CARD,CARD,CADD;AAwBA;AA/DF;;AAAA;AAAA,EAAiCjB,SAAjC;AAkEAe,WAAW,CAACkB,SAAZ,GAAwB;AACvBJ,EAAAA,eAAe,EAAE/B,SAAS,CAACoC,IAAV,CAAeC,UADT;AAEvBZ,EAAAA,aAAa,EAAEzB,SAAS,CAACoC,IAAV,CAAeC,UAFP;AAGvBV,EAAAA,iBAAiB,EAAE3B,SAAS,CAACoC,IAAV,CAAeC,UAHX;AAIvBb,EAAAA,cAAc,EAAExB,SAAS,CAACsC;AAJH,CAAxB;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACjB,KAAD;AAAA,SAAY;AACnCU,IAAAA,OAAO,EAAEV,KAAK,CAACkB,QAAN,CAAeR;AADW,GAAZ;AAAA,CAAxB;;AAIA,IAAMS,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACxC,SAAO;AACNX,IAAAA,eAAe,EAAE;AAAA,aAAMW,QAAQ,CAAC5B,iBAAiB,CAAC,aAAD,CAAlB,CAAd;AAAA,KADX;AAENE,IAAAA,YAAY,EAAE;AAAA,aAAM0B,QAAQ,CAAC1B,aAAY,EAAb,CAAd;AAAA;AAFR,GAAP;AAIA,CALD;;AAOA,eAAeN,OAAO,CAAC6B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CxB,WAA7C,CAAf","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport UserSwipeCard from '../../components/UserSwipeCard'\nimport { AppBar } from '../../components/AppBar'\nimport { ButtonsWrapper, ContentWrapper, SwipeScreenWrapper, MatchIcon, OptionButton } from './styled'\nimport { connect } from 'react-redux'\nimport { mdiAccountMultipleCheck } from '@mdi/js'\nimport { swipeLeft, swipeRight } from '../../components/UserSwipeCard/styled'\nimport { updateCurrentPage } from '../../actions/route'\nimport { Loader } from '../../components/Loader'\n\nimport { fetchProfile } from '../../actions/profiles'\n\nexport class SwipeScreen extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tcurrentAnimation: null,\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tif (!this.props.profileToSwipe && this.props.getProfileToSwipe) {\n\t\t\tthis.props.getProfileToSwipe()\n\t\t}\n\t\t// this.props.fetchProfile();\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\n\t\tif (prevProps.profileToSwipe !== this.props.profileToSwipe) {\n\t\t\tthis.setState({ currentAnimation: null })\n\t\t}\n\t}\n\n\tonChooseOption = (option) => () => {\n\t\tlet currentAnimation = option === 'dislike' ? swipeRight : swipeLeft\n\n\t\tif (this.state.currentAnimation === null) {\n\t\t\tthis.setState({ currentAnimation: currentAnimation })\n\t\t}\n\n\t\tif (this.props.profileToSwipe) {\n\t\t\tthis.props.chooseProfile(this.props.profileToSwipe.id, option === 'like')\n\t\t}\n\t}\n\n\trender() {\n\n\t\tconst { profileToSwipe, goToMatchScreen, profile } = this.props\n\t\tconst { currentAnimation } = this.state\n\t\tconsole.log(profile)\n\n\t\treturn (\n\t\t\t<SwipeScreenWrapper>\n\t\t\t\t<AppBar\n\t\t\t\t\trightAction={<MatchIcon\n\t\t\t\t\t\tsize={1.5}\n\t\t\t\t\t\tpath={mdiAccountMultipleCheck}\n\t\t\t\t\t\tonClick={goToMatchScreen}\n\t\t\t\t\t/>}\n\t\t\t\t/>\n\t\t\t\t<ContentWrapper>\n\t\t\t\t\t{currentAnimation !== null && (<Loader />)}\n\t\t\t\t\t{profileToSwipe ? <UserSwipeCard\n\t\t\t\t\t\tuserToSwipe={profileToSwipe}\n\t\t\t\t\t\tanimationDirection={currentAnimation}\n\t\t\t\t\t/> : (\n\t\t\t\t\t\t\t<Loader />\n\t\t\t\t\t\t)}\n\t\t\t\t\t<ButtonsWrapper>\n\t\t\t\t\t\t<OptionButton onClick={this.onChooseOption('dislike')} option=\"dislike\">X</OptionButton>\n\t\t\t\t\t\t<OptionButton onClick={this.onChooseOption('like')} option=\"like\">♥️</OptionButton>\n\t\t\t\t\t</ButtonsWrapper>\n\t\t\t\t</ContentWrapper>\n\t\t\t</SwipeScreenWrapper>\n\t\t)\n\t}\n}\n\nSwipeScreen.propTypes = {\n\tgoToMatchScreen: PropTypes.func.isRequired,\n\tchooseProfile: PropTypes.func.isRequired,\n\tgetProfileToSwipe: PropTypes.func.isRequired,\n\tprofileToSwipe: PropTypes.object,\n}\n\nconst mapStateToProps = (state) => ({\n\tprofile: state.profiles.profile\n})\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tgoToMatchScreen: () => dispatch(updateCurrentPage('MatchScreen')),\n\t\tfetchProfile: () => dispatch(fetchProfile())\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SwipeScreen)\n"]},"metadata":{},"sourceType":"module"}