{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Lopes\\\\Desktop\\\\NovaFuture4\\\\Vitor-Lopes\\\\semana8\\\\astro-match\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Lopes\\\\Desktop\\\\NovaFuture4\\\\Vitor-Lopes\\\\semana8\\\\astro-match\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Lopes\\\\Desktop\\\\NovaFuture4\\\\Vitor-Lopes\\\\semana8\\\\astro-match\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Lopes\\\\Desktop\\\\NovaFuture4\\\\Vitor-Lopes\\\\semana8\\\\astro-match\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Lopes\\\\Desktop\\\\NovaFuture4\\\\Vitor-Lopes\\\\semana8\\\\astro-match\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lopes\\\\Desktop\\\\NovaFuture4\\\\Vitor-Lopes\\\\semana8\\\\astro-match\\\\src\\\\containers\\\\SwipeScreen\\\\index.js\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport UserSwipeCard from '../../components/UserSwipeCard';\nimport { AppBar } from '../../components/AppBar';\nimport { ButtonsWrapper, ContentWrapper, SwipeScreenWrapper, MatchIcon, OptionButton } from './styled';\nimport { connect } from 'react-redux';\nimport { mdiAccountMultipleCheck } from '@mdi/js';\nimport { swipeLeft, swipeRight } from '../../components/UserSwipeCard/styled';\nimport { updateCurrentPage } from '../../actions/route';\nimport { Loader } from '../../components/Loader';\nimport { getProfile as _getProfile, choosePerson } from '../../actions/profiles';\nexport var SwipeScreen =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SwipeScreen, _Component);\n\n  function SwipeScreen(props) {\n    var _this;\n\n    _classCallCheck(this, SwipeScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SwipeScreen).call(this, props));\n\n    _this.onChooseOption = function (option) {\n      return function () {\n        var currentAnimation = option === 'dislike' ? swipeRight : swipeLeft;\n\n        if (_this.state.currentAnimation === null) {\n          _this.setState({\n            currentAnimation: currentAnimation\n          });\n        }\n\n        if (_this.props.profileToSwipe) {\n          _this.props.chooseProfile(_this.props.profileToSwipe.id, option === 'like');\n        }\n      };\n    };\n\n    _this.state = {\n      currentAnimation: null\n    };\n    return _this;\n  }\n\n  _createClass(SwipeScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.profileToSwipe && this.props.getProfileToSwipe) {\n        this.props.getProfileToSwipe();\n      }\n\n      this.props.getProfile();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (prevProps.profileToSwipe !== this.props.profileToSwipe) {\n        this.setState({\n          currentAnimation: null\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          profileToSwipe = _this$props.profileToSwipe,\n          goToMatchScreen = _this$props.goToMatchScreen;\n      var currentAnimation = this.state.currentAnimation;\n      return React.createElement(SwipeScreenWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(AppBar, {\n        rightAction: React.createElement(MatchIcon, {\n          size: 1.5,\n          path: mdiAccountMultipleCheck,\n          onClick: goToMatchScreen,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(ContentWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, currentAnimation !== null && React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), profileToSwipe ? React.createElement(UserSwipeCard, {\n        userToSwipe: profileToSwipe,\n        animationDirection: currentAnimation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }) : React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(ButtonsWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(OptionButton, {\n        onClick: this.onChooseOption('dislike'),\n        option: \"dislike\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"X\"), React.createElement(OptionButton, {\n        onClick: this.onChooseOption('like'),\n        option: \"like\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"\\u2665\\uFE0F\"))));\n    }\n  }]);\n\n  return SwipeScreen;\n}(Component);\nSwipeScreen.propTypes = {\n  goToMatchScreen: PropTypes.func.isRequired,\n  chooseProfile: PropTypes.func.isRequired,\n  getProfileToSwipe: PropTypes.func.isRequired,\n  profileToSwipe: PropTypes.object\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    profileToSwipe: state.profiles.profile\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    goToMatchScreen: function goToMatchScreen() {\n      return dispatch(updateCurrentPage('MatchScreen'));\n    },\n    chooseProfile: function chooseProfile(id, choice) {\n      return dispatch(choosePerson(id, choice));\n    },\n    getProfile: function getProfile() {\n      return dispatch(_getProfile());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SwipeScreen);","map":{"version":3,"sources":["C:/Users/Lopes/Desktop/NovaFuture4/Vitor-Lopes/semana8/astro-match/src/containers/SwipeScreen/index.js"],"names":["PropTypes","React","Component","UserSwipeCard","AppBar","ButtonsWrapper","ContentWrapper","SwipeScreenWrapper","MatchIcon","OptionButton","connect","mdiAccountMultipleCheck","swipeLeft","swipeRight","updateCurrentPage","Loader","getProfile","choosePerson","SwipeScreen","props","onChooseOption","option","currentAnimation","state","setState","profileToSwipe","chooseProfile","id","getProfileToSwipe","prevProps","prevState","snapshot","goToMatchScreen","propTypes","func","isRequired","object","mapStateToProps","profiles","profile","mapDispatchToProps","dispatch","choice"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport UserSwipeCard from '../../components/UserSwipeCard'\nimport { AppBar } from '../../components/AppBar'\nimport { ButtonsWrapper, ContentWrapper, SwipeScreenWrapper, MatchIcon, OptionButton } from './styled'\nimport { connect } from 'react-redux'\nimport { mdiAccountMultipleCheck } from '@mdi/js'\nimport { swipeLeft, swipeRight } from '../../components/UserSwipeCard/styled'\nimport { updateCurrentPage } from '../../actions/route'\nimport { Loader } from '../../components/Loader'\nimport { getProfile, choosePerson } from '../../actions/profiles'\n\nexport class SwipeScreen extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentAnimation: null,\n    }\n  }\n\n  componentDidMount() {\n    if (!this.props.profileToSwipe && this.props.getProfileToSwipe) {\n      this.props.getProfileToSwipe()\n    }\n    this.props.getProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.profileToSwipe !== this.props.profileToSwipe) {\n      this.setState({ currentAnimation: null })\n    }\n  }\n\n  onChooseOption = (option) => () => {\n    let currentAnimation = option === 'dislike' ? swipeRight : swipeLeft\n\n    if (this.state.currentAnimation === null) {\n      this.setState({ currentAnimation: currentAnimation })\n    }\n\n    if (this.props.profileToSwipe) {\n      this.props.chooseProfile(this.props.profileToSwipe.id, option === 'like')\n    }\n  }\n\n  render() {\n\n    const { profileToSwipe, goToMatchScreen } = this.props\n    const { currentAnimation } = this.state\n\n    return (\n      <SwipeScreenWrapper>\n        <AppBar\n          rightAction={<MatchIcon\n            size={1.5}\n            path={mdiAccountMultipleCheck}\n            onClick={goToMatchScreen}\n          />}\n        />\n        <ContentWrapper>\n          {currentAnimation !== null && (<Loader />)}\n          {profileToSwipe ? <UserSwipeCard\n            userToSwipe={profileToSwipe}\n            animationDirection={currentAnimation}\n          /> : (<Loader />)}\n          <ButtonsWrapper>\n            <OptionButton onClick={this.onChooseOption('dislike')} option=\"dislike\">X</OptionButton>\n            <OptionButton onClick={this.onChooseOption('like')} option=\"like\">♥️</OptionButton>\n          </ButtonsWrapper>\n        </ContentWrapper>\n      </SwipeScreenWrapper>\n    )\n  }\n}\n\nSwipeScreen.propTypes = {\n  goToMatchScreen: PropTypes.func.isRequired,\n  chooseProfile: PropTypes.func.isRequired,\n  getProfileToSwipe: PropTypes.func.isRequired,\n  profileToSwipe: PropTypes.object,\n}\n\nconst mapStateToProps = (state) => ({\n  profileToSwipe: state.profiles.profile\n})\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    goToMatchScreen: () => dispatch(updateCurrentPage('MatchScreen')),\n    chooseProfile: (id, choice) => dispatch(choosePerson(id, choice)),\n    getProfile: () => dispatch(getProfile())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SwipeScreen)"]},"metadata":{},"sourceType":"module"}